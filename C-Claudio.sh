#!/bin/bash

# ------------------------------------------------------------------------------
# Script: combine_dart_files.sh
# Description:
#   Combines .dart files from the 'lib' directory into multiple output files,
#   each capped at a target file size. Certain files and patterns are ignored.
# ------------------------------------------------------------------------------

# === Configuration ===
IGNORE_FILES=(
  "lib/ignore.dart"
  "lib/ignore.txt"
)

LIB_FOLDER="lib"
OUTPUT_PREFIX="mtg-spectrum"
TARGET_SIZE_KB=1000  # Max size per output file (in KB)
REMOVE_COMMENTS=true  # Set to false to keep comments in output

# === Initialization ===
file_count=0
ignore_count=0
part=1
current_output=$(printf "%s-%03d.txt" "$OUTPUT_PREFIX" "$part")

# === Helpers ===
function should_ignore_file() {
  local filepath="$1"

  # Ignore based on path pattern or extension
  case "$filepath" in
    */generated/* | *.g.dart | lib/testing/* | lib/test/core/* | lib/autumn/*)
      echo "Ignoring: $filepath (pattern match)"
      return 0
      ;;
  esac

  # Ignore exact matches in IGNORE_FILES
  for ignore in "${IGNORE_FILES[@]}"; do
    if [[ "$filepath" == "$ignore" ]]; then
      echo "Ignoring: $filepath (in IGNORE_FILES)"
      return 0
    fi
  done

  # Ignore based on generated comment patterns
  if grep -q -e "///This file is automatically generated. DO NOT EDIT" \
            -e "/// GENERATED CODE - DO NOT MODIFY BY HAND" \
            -e "// File generated by FlutterFire CLI." \
            -e "///This file is automatically generated." \
            -e "/// FlutterGen" "$filepath"; then
    echo "Ignoring: $filepath (contains generated file comment)"
    return 0
  fi

  return 1  # File should not be ignored
}

# === Main Script ===

# Check if lib folder exists
if [ ! -d "$LIB_FOLDER" ]; then
  echo "Error: '$LIB_FOLDER' folder not found in current directory"
  exit 1
fi

echo "Combining .dart files from '$LIB_FOLDER' and subdirectories..."

# Read .dart files recursively
while IFS= read -r -d '' filepath; do
  if should_ignore_file "$filepath"; then
    ((ignore_count++))
    continue
  fi

  # Start new output file if current exceeds size threshold
  if [ -f "$current_output" ] && [ $(wc -c < "$current_output") -gt $((TARGET_SIZE_KB * 1024)) ]; then
    part=$((part + 1))
    current_output=$(printf "%s-%03d.txt" "$OUTPUT_PREFIX" "$part")
  fi

  echo "Processing: $filepath"
  ((file_count++))

  {
    echo "// File: $filepath"
    if [ "$REMOVE_COMMENTS" = true ]; then
      # Remove block comments and inline comments, ignore empty lines
      perl -0777 -pe 's{/\*.*?\*/}{}gs' "$filepath" | sed '/^\s*\/\//d; /^\s*$/d'
    else
      cat "$filepath"
    fi
  } >> "$current_output"

done < <(find "$LIB_FOLDER" -type f -name "*.dart" -print0)

# === Summary ===
if [ $file_count -eq 0 ]; then
  echo "No .dart files were included after applying ignore rules."
else
  echo "Successfully combined $file_count files into $part output file(s)."
  echo "Ignored $ignore_count files."
fi

echo "Script completed."
