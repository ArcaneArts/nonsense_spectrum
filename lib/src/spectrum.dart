/// Provides `Spectrum` functionality.
import 'colors/material.dart';
import 'common.dart';

/// Abstract helper class for functionality provided by Spectrum.
///
/// Consider [alphaFromStrength], a method that will consider a `num? strength`
/// for usage as the alpha channel of a color, provided a `double` for opacity,
/// an `int` for alpha, or returning `null` otherwise.
abstract class Spectrum {
  /// Considers the provided number(?) [strength].
  ///
  /// If `strength` is between `0..1`, the return is an appropriate `int` for
  /// the alpha channel representing that strength as an opacity multiplied by
  /// the max channel value `0xFF`.
  ///
  /// If `strength` is greater than 1 or is not a `double` but an `int`, the
  /// return value is simply `strength` itself, clamped between `0..255`.
  ///
  /// If all else fails, the return is `null`; say, if provided `strength`
  /// itself is also `null`.
  static int? alphaFromStrength(num? strength) =>
      distinguishTransparency(strength);

  /// Accepts a `Color` and returns a [MaterialColor] whose primary is the
  /// provided `color` and whose `swatch` is generated by [mapSwatchByShade].
  static MaterialColor materialColor(
    Color color, {
    Blend mode = Blend.range,
    double? factor,
  }) =>
      materialColorFrom(color, mode, factor);
}
